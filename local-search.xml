<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>csp-j</title>
    <link href="/2024/10/05/csp-j/"/>
    <url>/2024/10/05/csp-j/</url>
    
    <content type="html"><![CDATA[<p><img src="/csp-j/1194403.webp"></p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我成功啦！</title>
    <link href="/2024/10/04/%E6%88%91%E6%88%90%E5%8A%9F%E5%95%A6%EF%BC%81/"/>
    <url>/2024/10/04/%E6%88%91%E6%88%90%E5%8A%9F%E5%95%A6%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<p>2024-10-4,<a href="https://linlin1195.github.io/">本站</a>正式成立。</p><p>另外，想问一下，我发布的<a href="https://linlin1195.github.io/2024/10/04/%E7%B4%A0%E6%95%B0%E5%9B%9E%E6%96%87%E6%95%B0/">素数回文数帖</a>无法渲染 Latex，请问要安装什么包？</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>素数回文数</title>
    <link href="/2024/10/04/%E7%B4%A0%E6%95%B0%E5%9B%9E%E6%96%87%E6%95%B0/"/>
    <url>/2024/10/04/%E7%B4%A0%E6%95%B0%E5%9B%9E%E6%96%87%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="素数回文数-题解"><a href="#素数回文数-题解" class="headerlink" title="素数回文数 题解"></a>素数回文数 题解</h1><h3 id="题目描述-Problem-Description"><a href="#题目描述-Problem-Description" class="headerlink" title="题目描述 Problem Description"></a>题目描述 Problem Description</h3><p>如果一个数从左边读和右边读都是同一个数，就称为回文数，例如686就是一个回文数。编程求10到1000内所有的既是回文数同时又是素数的自然数。</p><h3 id="输入描述-Input-Description"><a href="#输入描述-Input-Description" class="headerlink" title="输入描述 Input Description"></a>输入描述 Input Description</h3><p>无。</p><h3 id="输出描述-Output-Description"><a href="#输出描述-Output-Description" class="headerlink" title="输出描述 Output Description"></a>输出描述 Output Description</h3><p>若干个数 每行一个</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><p>你猜？？？</p><hr><h3 id="正式开始题解！"><a href="#正式开始题解！" class="headerlink" title="正式开始题解！"></a>正式开始题解！</h3><p>这道题是个<del>十分简单的</del>枚举题，暴力判素也不会TLE。</p><p>先考虑普通做法。</p><p>想法是: 从10到1000，循环枚举每一个数，然后判断它<strong>是否是素数</strong>并且<strong>回文</strong>如果是，输出。</p><hr><h4 id="如何判素"><a href="#如何判素" class="headerlink" title="如何判素?"></a>如何判素?</h4><p>有一个最暴力的想法，从2一直枚举到<code>x-1</code>，判断这个数是否是<code>x</code>的因子。如果是，那么<code>x</code>不是质数。<br>如果枚举完了都没有<code>return</code>出去，那么可以确定<code>x</code>没有其他因子，是素数。<br>另外还有一个需要注意的点，当<code>x</code>小于2时，<code>x</code>也不为质数。</p><p>示范代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_prime</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; x; i++)<br>         <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度是 $O(n)$ 的。</p><p><strong>能不能更快？</strong></p><p>答案是肯定的。素数是因子只有1和本身，如果<code>x</code>不是素数，则还有其他因子，其中的因子，假如为<code>a</code>，<code>b</code>.其中必有一个大于 $\sqrt{x}$ ，一个小于  $\sqrt{x}$ 。所以必有一个小于或等于其平方根的因数，那么验证素数时就只需要枚举2到 $\sqrt{x}$ 就可以了。即一个合数一定含有小于它平方根的质因子。</p><p>示范代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_prime</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; x; i++)<br>         <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度 $O(\sqrt{n})$ ，大大滴优秀啊(赞赏)</p><hr><h4 id="如何判回文"><a href="#如何判回文" class="headerlink" title="如何判回文?"></a>如何判回文?</h4><p>我们只需要将数字倒序，然后再看是否和原数相等就可以了。</p><p>如何把数字倒序?</p><p>最简单的想法是: 把数字转<code>string</code>然后再<code>reverse</code>。<del>(甩锅给STL</del>接下来又是欢乐的代码环节了 <del>(STL: ******</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    string tostr = <span class="hljs-built_in">to_string</span>(x);<br>    <span class="hljs-built_in">reverse</span>(tostr.<span class="hljs-built_in">begin</span>(), tostr.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">stoi</span>(tostr);<br>&#125;<br></code></pre></td></tr></table></figure><p>相信有了这些，你应该能A了这道题，<del>祝你们成功[滑稽]</del></p><h2 id="但还是在此贴出暴力A码"><a href="#但还是在此贴出暴力A码" class="headerlink" title="但还是在此贴出暴力A码:"></a>但还是在此贴出暴力A码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_prime</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i * i &lt; = x; i++)<br><span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>string tostr = <span class="hljs-built_in">to_string</span>(x);<br><span class="hljs-built_in">reverse</span>(tostr.<span class="hljs-built_in">begin</span>(), tostr.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">stoi</span>(tostr);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">10</span>; i &lt;= <span class="hljs-number">1000</span>; i++)<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">is_prime</span>(i) &amp;&amp; <span class="hljs-built_in">reverse</span>(i) == i)<br>cout &lt;&lt; i &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></h2><p>$O(n \sqrt{n}+n \log_{10}{n})$ 的复杂度用来AC这道题的确绰绰有余。但是我们还是要想: 还能更快吗?<br>没错，还能更快!<br><strong>前置芝士 欧拉筛</strong></p><p>欧拉筛(Euler sieve)，又名线性筛法，因其线性的复杂度而得名，用于筛出1~n之间的所有质数。<br>它在埃氏筛法上做了优化，把埃氏筛法 $O(n \log{\log_2{n}})$ 的近似 $O(n)$ 的复杂度彻底优化为 $O(n)$ 。原理是让每个数只被它的最小质因子筛一次，而不是像埃氏筛法一样用质数筛一个合数多次。</p><p><a href="https://blog.csdn.net/GD_ONE/article/details/104660294">获取详细信息</a></p><p>在这里给出示例代码:  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">euler_sieve</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    not_prime[<span class="hljs-number">0</span>] = not_prime[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!not_prime[i]) primes[primes_num++] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; primes_num &amp;&amp; i * primes[j] &lt;= n; j++) &#123;<br>            not_prime[i * primes[j]] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>现在，我们就很自然地联想到: 这题可以用欧拉筛来做!</p><p>但是这有什么用呢? 不就是把 $O(n\sqrt{n})$ 这一段优化掉了吗?</p><p>注意到不能让我们把复杂度化为 $O(n)$的罪魁祸首是: reverse函数!</p><p>所以现在重点放在reverse上。</p><hr><p><strong>reverse</strong>的优化</p><p>我们知道，传进reverse函数的值在[10, 1000]之间，只可能是[2, 4]位数。</p><p>所以我们可以特判x的位数，分别返回值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">100</span>) <span class="hljs-keyword">return</span> (x / <span class="hljs-number">10</span>) + (x % <span class="hljs-number">10</span>) * <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">1000</span>) <span class="hljs-keyword">return</span> (x / <span class="hljs-number">100</span>) + (x / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>) * <span class="hljs-number">10</span> + (x % <span class="hljs-number">10</span>) * <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>接下来，让我们把所有元素结合到一起!</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">bool</span> not_prime[<span class="hljs-number">1001</span>];<br><span class="hljs-type">int</span> primes[<span class="hljs-number">991</span>];<br><span class="hljs-type">int</span> primes_num = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">euler_sieve</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    not_prime[<span class="hljs-number">0</span>] = not_prime[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!not_prime[i]) primes[primes_num++] = i;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; primes_num &amp;&amp; i * primes[j] &lt;= n; j++) &#123;<br>            not_prime[i * primes[j]] = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">100</span>) <span class="hljs-keyword">return</span> (x / <span class="hljs-number">10</span>) + (x % <span class="hljs-number">10</span>) * <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">1000</span>) <span class="hljs-keyword">return</span> (x / <span class="hljs-number">100</span>) + (x / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>) * <span class="hljs-number">10</span> + (x % <span class="hljs-number">10</span>) * <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">euler_sieve</span>(<span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; primes_num; i++)<br>        <span class="hljs-keyword">if</span> (primes[i] &gt; <span class="hljs-number">9</span> &amp;&amp; primes[i] == <span class="hljs-built_in">reverse</span>(primes[i]))<br>            cout &lt;&lt; primes[i] &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>The end .</em></p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/10/04/hello-world/"/>
    <url>/2024/10/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
